{"remainingRequest":"/home/jr/devspace/simpleCRM/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jr/devspace/simpleCRM/src/components/agenda.vue?vue&type=template&id=1371001c&scoped=true&","dependencies":[{"path":"/home/jr/devspace/simpleCRM/src/components/agenda.vue","mtime":1643810203940},{"path":"/home/jr/devspace/simpleCRM/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1643224169106},{"path":"/home/jr/devspace/simpleCRM/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1643224172087},{"path":"/home/jr/devspace/simpleCRM/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1643224169106},{"path":"/home/jr/devspace/simpleCRM/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1643224172087}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}